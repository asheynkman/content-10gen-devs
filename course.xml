<course url_name='2012_Fall' org='10gen' course='M101' start='2012-10-22T00:00' display_name='MongoDB for Developers'><chapter graceperiod='1 day' start='2012-10-22T00:00' due='October 29' display_name='Week 1'><sequential graded='false' display_name='Welcome to M101'><vertical><video display_name='Lecture' youtube='1.0:179MiZSibco'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>What counts toward your final grade in the class?<choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='false'><startouttext/>Quizzes<endouttext/></choice><choice correct='true'><startouttext/>Homeworks<endouttext/></choice><choice correct='true'><startouttext/>Final Exam<endouttext/></choice><choice correct='false'><startouttext/>Class Participation<endouttext/></choice></checkboxgroup></choiceresponse></problem></sequential><sequential graded='false' display_name='What is MongoDB?'><vertical><video display_name='Lecture' youtube='1.0:Lfl8hdQOi6Y'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Which of the following statements are true about MongoDB?<choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='true'><startouttext/>MongoDB is document oriented.<endouttext/></choice><choice correct='false'><startouttext/>MongoDB supports Joins.<endouttext/></choice><choice correct='true'><startouttext/>MongoDB is schemaless<endouttext/></choice><choice correct='false'><startouttext/>MongoDB supports SQL.<endouttext/></choice></checkboxgroup></choiceresponse></problem><vertical><video display_name='Answer' youtube='1.0:h80NwJJZM-g'/></vertical></sequential><sequential graded='false' display_name='Mongo Relative to Relational'><vertical><video display_name='Lecture' youtube='1.0:-KIC1LXxcGM'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Which features did MongoDB omit in order to retain scalability?<choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='true'><startouttext/>Joins<endouttext/></choice><choice correct='false'><startouttext/>Indexes<endouttext/></choice><choice correct='false'><startouttext/>Secondary Indexes<endouttext/></choice><choice correct='true'><startouttext/>Transactions across multiple collections<endouttext/></choice></checkboxgroup></choiceresponse></problem><vertical><video display_name='Answer' youtube='1.0:IAvnMgvHuLw'/></vertical></sequential><sequential graded='false' display_name='Overview of Building an app with Mongo'><vertical><video display_name='Lecture' youtube='1.0:_e0J06elxb8'/></vertical></sequential><sequential graded='false' display_name='Quick Introduction to the Mongo Shell'><vertical><video display_name='Lecture' youtube='1.0:f-lyGAMnNY4'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Which of the following expressions are valid JSON documents?
<choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='true'><startouttext/>{a:1, b:2, c:3}<endouttext/></choice><choice correct='false'><startouttext/>{a,1; b,4, c,6}<endouttext/></choice><choice correct='false'><startouttext/>{a:1; b:1; c:4}<endouttext/></choice><choice correct='false'><startouttext/>(A,1; b:2; c,4}<endouttext/></choice></checkboxgroup></choiceresponse></problem><vertical><video display_name='Answer' youtube='1.0:YQTqdLe3W4M'/></vertical></sequential><sequential graded='false' display_name='JSON introduced'><vertical><video display_name='Lecture' youtube='1.0:2jsJeH8q6YM'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Which of the following are valid JSON documents?<choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='true'><startouttext/>{a:1, b:2, c: 3}<endouttext/></choice><choice correct='true'><startouttext/>{a:1, b:2, c:[1,2,3,4,5]}<endouttext/></choice><choice correct='true'><startouttext/>{a:1, b:{}, c: [ { a:1, b:2}, 5, 6]}<endouttext/></choice><choice correct='true'><startouttext/>{  }<endouttext/></choice></checkboxgroup></choiceresponse></problem><vertical><video display_name='Answer' youtube='1.0:uWcOsdV4Iz4'/></vertical></sequential><sequential graded='false' display_name='Installing MongoDB (mac)'><vertical><video display_name='Lecture' youtube='1.0:6VFukRETCTg'/></vertical></sequential><sequential graded='false' display_name='Installing MongoDB (windows)'><vertical><video display_name='Lecture' youtube='1.0:hX5louVryOQ'/></vertical></sequential><sequential graded='false' display_name='Installing Bottle and Python (mac)'><vertical><video display_name='Lecture' youtube='1.0:vxTN6KFegLg'/></vertical></sequential><sequential graded='false' display_name='Installing Python (windows)'><vertical><video display_name='Lecture' youtube='1.0:njfPdZTmTrI'/></vertical></sequential><sequential graded='false' display_name='Installing Bottle.py (windows)'><vertical><video display_name='Lecture' youtube='1.0:OhEpXjL0vt8'/></vertical></sequential><sequential graded='false' display_name='Installing PyMongo (mac)'><vertical><video display_name='Lecture' youtube='1.0:XRJawbpWxtg'/></vertical></sequential><sequential graded='false' display_name='Installing PyMongo (windows)'><vertical><video display_name='Lecture' youtube='1.0:YwWc6HZ0LWo'/></vertical></sequential><sequential graded='false' display_name='Hello World, Mongo Style'><vertical><video display_name='Lecture' youtube='1.0:IG7PntLyv2E'/></vertical></sequential><sequential graded='false' display_name='Hello World on a Web Server'><vertical><video display_name='Lecture' youtube='1.0:8_o6nyenZbk'/></vertical></sequential><sequential graded='false' display_name='Mongo is Schemaless'><vertical><video display_name='Lecture' youtube='1.0:K6dlBbH_XHI'/></vertical></sequential><sequential graded='false' display_name='JSON Revisited'><vertical><video display_name='Lecture' youtube='1.0:zbYCcMWJGNY'/></vertical></sequential><sequential graded='false' display_name='JSON Arrays'><vertical><video display_name='Lecture' youtube='1.0:JkK9n6_ahVk'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Write the JSON for a simple document containing a single key "fruit" that has as its value an array containing three strings: "apple", "pear", and "peach"<customresponse><textbox rows='4' cols='50' correct_answer="{'fruit': ['apple', 'pear', 'peach']}"/><answer type='loncapa/python'><![CDATA[
import demjson
correct = ['correct']
messages = ['test message']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
quiz_answer = '''{'fruit': ['apple', 'pear', 'peach']}'''
quiz_answer_json = {}
try:
  quiz_answer_json = demjson.decode(quiz_answer)
except demjson.JSONDecodeError as err:
  messages[0] = 'Quiz Answer failed to parse' + str(err)
response_json = {}
try:
  response_json = demjson.decode(r)
except demjson.JSONDecodeError as err:
  messages[0] = 'Response failed to parse' + str(err)
if not(response_json == quiz_answer_json):
  correct[0] = 'incorrect'
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:ciuq7XPqHKI'/></vertical></sequential><sequential graded='false' display_name='JSON Subdocuments'><vertical><video display_name='Lecture' youtube='1.0:vrYAEH3g13M'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Write a JSON document with a single key, "address" that has as it value another document with the keys 
'street_address', 'city', 'state', 'zipcode', with the following values: 'street_address' is "23 Elm Drive", 'city' is "Palo Alto", 'state' is "California", 'zipcode' is "94305"<customresponse><textbox rows='4' cols='50' correct_answer="{'address': {'street_address': &quot;23 Elm Drive&quot;, 'city' : &quot;Palo Alto&quot;, 'state': &quot;California&quot;, 'zipcode': &quot;94305&quot;} }"/><answer type='loncapa/python'><![CDATA[
import demjson
correct = ['correct']
messages = ['test message']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
quiz_answer = '''{'address': {'street_address': "23 Elm Drive", 'city' : "Palo Alto", 'state': "California", 'zipcode': "94305"} }'''
quiz_answer_json = {}
try:
  quiz_answer_json = demjson.decode(quiz_answer)
except demjson.JSONDecodeError as err:
  messages[0] = 'Quiz Answer failed to parse' + str(err)
response_json = {}
try:
  response_json = demjson.decode(r)
except demjson.JSONDecodeError as err:
  messages[0] = 'Response failed to parse' + str(err)
if not(response_json == quiz_answer_json):
  correct[0] = 'incorrect'
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:NGp_y6BaEMw'/></vertical></sequential><sequential graded='false' display_name='JSON Spec'><vertical><video display_name='Lecture' youtube='1.0:kOrsT94-A28'/></vertical></sequential><sequential graded='false' display_name='Introduction to our class project, the blog'><vertical><video display_name='Lecture' youtube='1.0:ePi3kDoexoM'/></vertical></sequential><sequential graded='false' display_name='Blog in Relational Tables'><vertical><video display_name='Lecture' youtube='1.0:boR2y9MHCa0'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>letâ€™s assume that our blog can be modeled with the following relational tables:

<pre>
authors:
	author_id,
	name,
	email,
	password

posts:
	post_id,
	author_id
	title,
	body,	
	publication_date

comments:
	comment_id,
	name, 
	email,
	comment_text

post_comments:
	post_id,
	comment_id


tags
	tag_id
	name

post_tags
	post_id
	tag_id
</pre>

In order to display a blog post with its comments and tags, how many tables will need to be accessed?<multiplechoiceresponse direction='vertical'><choicegroup type='MultipleChoice'><choice location='bottom' correct='false'><text>2</text></choice><choice location='bottom' correct='false'><text>3</text></choice><choice location='bottom' correct='false'><text>5</text></choice><choice location='bottom' correct='true'><text>6</text></choice></choicegroup></multiplechoiceresponse></problem><vertical><video display_name='Answer' youtube='1.0:vB-4AbbLKeg'/></vertical></sequential><sequential graded='false' display_name='Blog in Documents'><vertical><video display_name='Lecture' youtube='1.0:ZjwCzyqKVdY'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Given the document schema that we proposed for the blog, how many collections would we need to access to display the blog home page?<multiplechoiceresponse direction='vertical'><choicegroup type='MultipleChoice'><choice location='bottom' correct='false'><text>0</text></choice><choice location='bottom' correct='true'><text>1</text></choice><choice location='bottom' correct='false'><text>2</text></choice><choice location='bottom' correct='false'><text>4</text></choice></choicegroup></multiplechoiceresponse></problem><vertical><video display_name='Answer' youtube='1.0:WJblHPsp1p4'/></vertical></sequential><sequential graded='false' display_name='Intro to Schema Design'><vertical><video display_name='Lecture' youtube='1.0:6XE3wZCPiZ8'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>In which scenario is it impossible to embed data within a document (you must put the data in it a separate collection). Check all that apply.<choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='false'><startouttext/>The data would be duplicated across multiple objects within a collection.<endouttext/></choice><choice correct='false'><startouttext/>You need an index on the data element.<endouttext/></choice><choice correct='true'><startouttext/>The embedded data could exceed the 16MB document limit within MongoDB<endouttext/></choice><choice correct='false'><startouttext/>The data is not isomorphic.<endouttext/></choice></checkboxgroup></choiceresponse></problem><vertical><video display_name='Answer' youtube='1.0:wiwOEG_6ojs'/></vertical></sequential><sequential graded='false' display_name='Intro to Python'><vertical><video display_name='Lecture' youtube='1.0:-cAtffa59FM'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Write an expression to concatenate two strings "hat" and "pin" in python to the string "hatpin"<customresponse><textbox rows='4' cols='50' correct_answer='"hat" + "pin"'/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''"hat" + "pin"'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:PuyAdxxzSk0'/></vertical></sequential><sequential graded='false' display_name='Python Lists'><vertical><video display_name='Lecture' youtube='1.0:H1BOYfbnPq8'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Write the to code to initialize a list with the items "hammer", "nail" and "wall" and assign the list to the variable named "things".

<p>
Note:  Please use double quotes for string values for this quiz.
</p><customresponse><textbox rows='4' cols='50' correct_answer='things = ["hammer", "nail", "wall"]'/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''things = ["hammer", "nail", "wall"]'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:8WdnrhlfSLE'/></vertical></sequential><sequential graded='false' display_name='Python Lists, Manipulating'><vertical><video display_name='Lecture' youtube='1.0:PHii2QYNyB8'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Write the code to append the item "hammer" onto a list named things. <customresponse><textbox rows='4' cols='50' correct_answer='things.append("hammer")'/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''things.append("hammer")'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:ZSraFzkEDzs'/></vertical></sequential><sequential graded='false' display_name='Python Lists, Slice Operator'><vertical><video display_name='Lecture' youtube='1.0:vNyIZNWK0rw'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>things = ['apples', 'orange', 'pear', 'grape', 'kiwi']. What is the slice notation that will return the sublist ['orange', 'pear']?
<customresponse><textbox rows='4' cols='50' correct_answer="things[1:3]"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''things[1:3]'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:vE498xAFoGc'/></vertical></sequential><sequential graded='false' display_name='Python Lists, Inclusion'><vertical><video display_name='Lecture' youtube='1.0:QXUMUvHB2Ws'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>given a python list called "fruit", write an if statement to check whether "apple" is in the list.<customresponse><textbox rows='4' cols='50' correct_answer='if "apple" in fruit:&#10;'/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''if "apple" in fruit:
'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:LdA0__D4zLI'/></vertical></sequential><sequential graded='false' display_name='Python, Working with Dicts'><vertical><video display_name='Lecture' youtube='1.0:_AbCyE0uKmE'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Initialize a new dict named "colors" with the following key values pairs: sky is blue, sea is blue. earth is brown.<customresponse><textbox rows='4' cols='50' correct_answer="colors = {'sky': 'blue', 'sea' : 'blue', 'earth': 'brown'}"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''colors = {'sky': 'blue', 'sea' : 'blue', 'earth': 'brown'}'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:edEYrBoa7Ao'/></vertical></sequential><sequential graded='false' display_name='Python: Dicts and Lists together'><vertical><video display_name='Lecture' youtube='1.0:9k1XvuoGdrk'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Initialize a new dict with a single key, "animals" whose value is the list "dog", "cat", "zebra" and assign the entire expression to variable named "things"<customresponse><textbox rows='4' cols='50' correct_answer="things = {'animals' : ['dog', 'cat', 'zebra']}"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''things = {'animals' : ['dog', 'cat', 'zebra']}'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:Gqb-OUFcQas'/></vertical></sequential><sequential graded='false' display_name='Python: for loops, with Lists'><vertical><video display_name='Lecture' youtube='1.0:zMqLCtf3ML4'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>What does the following code print?

<pre>
sum = 0
numbers = [1,2,3,5,8]
for i in numbers:
  sum = sum + i
print i
</pre><customresponse><textbox rows='4' cols='50' correct_answer="8"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''8'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:ohA78_D5Rn8'/></vertical></sequential><sequential graded='false' display_name='Python: for loops with dicts'><vertical><video display_name='Lecture' youtube='1.0:HHTICY6rUGI'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'><pre>
people = {'name':'Bob', 'hometown': "Palo Alto", 'favorite_color': 'red'}
for item in people:
  if (item == 'favorite_color'):
     print  people[item]
</pre>

What does this program print?<customresponse><textbox rows='4' cols='50' correct_answer="red"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''red'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:OnkPdMP1fVc'/></vertical></sequential><sequential graded='false' display_name='Python: Combining Dicts and Lists'><vertical><video display_name='Lecture' youtube='1.0:ome7jDN_lH0'/></vertical><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>
<pre>
obj = {'a':1,'b': 2, 'c': [1, 3, 5]}

sum = 0
if 'c' in obj:
   for n in obj['c']:
     sum = sum + n

print sum
</pre>
     <customresponse><textbox rows='4' cols='50' correct_answer="9"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''9'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem><vertical><video display_name='Answer' youtube='1.0:Y6NKd6xUC6M'/></vertical></sequential><sequential graded='false' display_name='Python: while loops'><vertical><video display_name='Lecture' youtube='1.0:TEdFAheS5UE'/></vertical></sequential><sequential graded='false' display_name='Python: function calls'><vertical><video display_name='Lecture' youtube='1.0:PizwcirYuGY'/></vertical></sequential><sequential graded='false' display_name='Python: exception handling'><vertical><video display_name='Lecture' youtube='1.0:nrZYqF9KwaU'/></vertical></sequential><sequential graded='false' display_name='Bottle framework: Url Handlers'><vertical><video display_name='Lecture' youtube='1.0:x5TlvbWxjL0'/></vertical></sequential><sequential graded='false' display_name='Bottle framework: using views'><vertical><video display_name='Lecture' youtube='1.0:GUFDtACjFcc'/></vertical></sequential><sequential graded='false' display_name='Bottle framework: handling form content'><vertical><video display_name='Lecture' youtube='1.0:sUUT-gIS5ik'/></vertical></sequential><sequential graded='false' display_name='Bottle framework: using cookies'><vertical><video display_name='Lecture' youtube='1.0:Wk_1Lz_-gk4'/></vertical></sequential><sequential graded='false' display_name='The Pymongo driver'><vertical><video display_name='Lecture' youtube='1.0:u2kRRt861bU'/></vertical></sequential><sequential graded='false' display_name='Pymongo driver, safe mode, exception processing'><vertical><video display_name='Lecture' youtube='1.0:GR6W-gHffXw'/></vertical></sequential><sequential graded='true' display_name='Homework 1.1'><vertical><video display_name='Lecture' youtube='1.0:r48N7GcDqVI'/></vertical><problem showanswer='never' attempts='3' graded='true' format='Homework' display_name='Quiz'>Install MongoDB on your computer and run it on the standard port.

<p>
Download the <a href="/static/handouts/hw1.tar">HW1 tarball (mac)</a> or <a href="/static/handouts/hw1.zip">zipfile (windows)</a>, expand it as follows:
</p>
Mac Users
<pre>
tar xvf hw1.tar
</pre>
Windows Users
<pre>
You probably don't have tar installed so right click on the hw1.zip file and choose "extract all"
</pre>
Use mongorestore to restore the dump into your running mongod. Do this by opening a terminal window (mac) or cmd window (windows) and navigating to the directory so that the dump directory is directly beneath you. Now type
<pre>
mongorestore dump
</pre>
Note you will need to have your path setup correctly to find mongorestore.
<p>
Now, using the Mongo shell, perform a findone on the collection called <em>hw1</em> in the database <em>m101</em>. That will return one document. Please provide the value corresponding to the "answer" key from the document returned.
</p><customresponse><textbox rows='4' cols='50' correct_answer="42"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''42'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='true' display_name='Homework 1.2'><problem showanswer='never' attempts='3' graded='true' format='Homework' display_name='Quiz'>Get Pymongo installed on your computer. To prove its installed, run the program:

<pre>
python hw1-2.py
</pre>

Then provide the output from that program below. Note that you have to get MongoDB installed and the homework dataset imported from the previous homework.<customresponse><textbox rows='4' cols='50' correct_answer="1815"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''1815'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='true' display_name='Homework 1.3'><problem showanswer='never' attempts='3' graded='true' format='Homework' display_name='Quiz'>We are now going to test that you have bottle installed correctly and can run a bottle-based project. Run the hw1-3.py download as follows:
<pre>
python hw1-3.py
</pre>
It requires bottle to be installed correctly, your mongodb to be running, and that you have run mongorestore properly.  From a different terminal window type the following from the command line: curl http://localhost:8080/hw1/50
<p>
Type the answer into the box below
</p><customresponse><textbox rows='4' cols='50' correct_answer="53"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''53'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential></chapter><chapter graceperiod='1 day' start='2012-10-29T00:00' due='November 5' display_name='Week2 - CRUD'><sequential graded='false' display_name='Inserting Documents'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Insert a document into the "fruit" collection with the attributes of "name" being "apple", "color" being "red", and "shape" being round. Assume that we have already issued the use command to get into the right database. Use the "insert" method.<customresponse><textbox rows='4' cols='50' correct_answer='db.fruit.insert({name:"apple", color:"red", shape:"round"})'/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.fruit.insert({name:"apple", color:"red", shape:"round"})'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='$set operator'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Given the document
<pre>
{'username':'splunker', 'country':'US', 'phone':'718-343-3433'}
</pre>
in the collection <em>users</em>, write the shell command for updating the country to 'RU' for only this user. <customresponse><textbox rows='4' cols='50' correct_answer="db.users.update({'username':'splunker'},{$set:{'country':'RU'}})"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.users.update({'username':'splunker'},{$set:{'country':'RU'}})'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='$unset operator'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Write an update query that will unset the <em>interests</em> key in the following document in the collection <em>users</em>.
<pre>
{'username':'jimmy', favorite_color:'blue', interests:['debating', 'politics']}
</pre><customresponse><textbox rows='4' cols='50' correct_answer="db.users.update({username:'jimmy'}, {$unset:{'interests':1}})"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.users.update({username:'jimmy'}, {$unset:{'interests':1}})'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='upserts'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>After performing the following update on an empty collection
<pre>
db.foo.update({username:'bar'}, {'$set':{'interests':['cat', 'dog']}}, {upsert: true} );
</pre>
What could be the state of the collection.<choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='false'><startouttext/>{ "_id" : ObjectId("507b78232e8dfde94c149949"), "interests" : [ "cat", "dog" ]}<endouttext/></choice><choice correct='false'><startouttext/>{"interests" : [ "cat", "dog" ], "username" : "bar" }<endouttext/></choice><choice correct='false'><startouttext/>{}<endouttext/></choice><choice correct='true'><startouttext/>{ "_id" : ObjectId("507b78232e8dfde94c149949"), "interests" : [ "cat", "dog" ], "username" : "bar" }<endouttext/></choice></checkboxgroup></choiceresponse></problem></sequential><sequential graded='false' display_name='Wholesale Updating of a Document'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Let's say you had a collection with the following document in it:
<pre>
{ "_id" : "Texas", "population" : 2500000, "land_locked" : 1 }
</pre>
and you issued the query:
<pre>
db.foo.update({_id:"Texas"},{population:30000000})
</pre>
What would be the state of the collection after the update?<multiplechoiceresponse direction='vertical'><choicegroup type='MultipleChoice'><choice location='bottom' correct='false'><text>{ "_id" : "Texas", "population" : 2500000, "land_locked" : 1 }
</text></choice><choice location='bottom' correct='false'><text>{ "_id" : "Texas", "population" : 3000000, "land_locked" : 1 }
</text></choice><choice location='bottom' correct='true'><text>{ "_id" : "Texas", "population" : 30000000 }</text></choice><choice location='bottom' correct='false'><text>{ "_id" : ObjectId("507b7c601eb13126c9e3dcca"), "population" : 2500000 }</text></choice></choicegroup></multiplechoiceresponse></problem></sequential><sequential graded='false' display_name='Mongo shell, introdution to findOne'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Use <em>findOne</em> on the collection <em>users</em> to find one document where the key <em>username</em> is "dwight", and retrieve only the key named <em>email</em>.<customresponse><textbox rows='4' cols='50' correct_answer='db.users.findOne ( { "username" : "dwight" } , { "_id" : false , "email" : true } );'/></customresponse></problem></sequential><sequential graded='false' display_name='Goals for week 2'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>By the end of this week, you'll know which of the following?<choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='true'><startouttext/>MongoDB's basic document creation, retrieval, modification, and removal operations<endouttext/></choice><choice correct='true'><startouttext/>Some features of the MongoDB shell, mongo<endouttext/></choice><choice correct='false'><startouttext/>How to measure performance of MongoDB operations<endouttext/></choice><choice correct='true'><startouttext/>How to manipulate MongoDB documents from Python<endouttext/></choice><choice correct='false'><startouttext/>How to analyze data in MongoDB collections<endouttext/></choice></checkboxgroup></choiceresponse></problem></sequential><sequential graded='false' display_name='javascript basics'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>What does the following fragment of JavaScript output?

<pre>
x = { "a" : 1 };
y = "a";
x[y]++;
print(x.a);
</pre>
<customresponse><textbox rows='4' cols='50' correct_answer="2"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''2'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='BSON types'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Which of the following are types available in BSON?<choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='true'><startouttext/>Strings<endouttext/></choice><choice correct='true'><startouttext/>Floating-point numbers<endouttext/></choice><choice correct='false'><startouttext/>Complex numbers<endouttext/></choice><choice correct='true'><startouttext/>Arrays<endouttext/></choice><choice correct='true'><startouttext/>Objects<endouttext/></choice><choice correct='true'><startouttext/>Timestamps<endouttext/></choice></checkboxgroup></choiceresponse></problem></sequential><sequential graded='false' display_name='Query by example, project'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Supposing a <em>scores</em> collection similar to the one presented, how would you find all documents with an essay score equal to 50 and only retrieve the <em>student</em> field?<customresponse><textbox rows='4' cols='50' correct_answer='db.scores.find({ type:"essay", score:50}, {student:true,_id:false});'/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.scores.find({ type:"essay", score:50}, {student:true,_id:false});'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='Query modifiers'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Which of these finds documents with a score between 50 and 60, inclusive?<multiplechoiceresponse direction='vertical'><choicegroup type='MultipleChoice'><choice location='bottom' correct='false'><text>db.scores.find({ score : { $gt : 50 , $lt : 60 } } );</text></choice><choice location='bottom' correct='true'><text>db.scores.find({ score : { $gte : 50 , $lte : 60 } } );</text></choice><choice location='bottom' correct='false'><text>db.scores.find({ score : { $gt : 50 , $lte : 60 } } );</text></choice><choice location='bottom' correct='false'><text>db.scores.find({ score : { $gte : 50 , $lt : 60 } } );</text></choice><choice location='bottom' correct='false'><text>db.scores.find({ score : { $gt : 50 } } );</text></choice></choicegroup></multiplechoiceresponse></problem></sequential><sequential graded='false' display_name='Query modifiers, continued'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Which of the following will find all users with username between "F" and "Q"?<choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='true'><startouttext/>db.users.find( { name : { $gte : "F" ,  $lte : "Q" } } );<endouttext/></choice><choice correct='true'><startouttext/>db.users.find( { name : { $lte : "Q" , $gte : "F" } } );<endouttext/></choice><choice correct='false'><startouttext/>db.users.find( { name : { $gte : "f" ,  $lte : "Q" } } );<endouttext/></choice><choice correct='false'><startouttext/>db.users.find( { name :  { $lte : "Q" } });<endouttext/></choice></checkboxgroup></choiceresponse></problem></sequential><sequential graded='false' display_name='Query modifiers, continued continued'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Write a query that retrieves documents from a <em>users</em> collection where the <em>username</em> has a "q" in it, and the document has an <em>email</em> field.<customresponse><textbox rows='4' cols='50' correct_answer='db.users.find({ name : { $regex : "q" }, email : { $exists: true } } );'/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.users.find({ name : { $regex : "q" }, email : { $exists: true } } );'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='Query modifiers, continued continued continued'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>How would you find all documents in the <em>scores</em> collection where the <em>score</em> is less than 50 or greater than 90?<customresponse><textbox rows='4' cols='50' correct_answer="db.scores.find( { $or : [ { score : { $lt : 50 } }, { score : { $gt : 90 } } ] } ) ;"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.scores.find( { $or : [ { score : { $lt : 50 } }, { score : { $gt : 90 } } ] } ) ;'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='Query modifiers, trick question'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>What will the following query do?

<pre>db.scores.find( { score : { $gt : 50 }, score : { $lt : 60 } } );</pre><choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='false'><startouttext/>Find all documents with score between 50 and 60<endouttext/></choice><choice correct='false'><startouttext/>Find all documents with score greater than 50<endouttext/></choice><choice correct='true'><startouttext/>Find all documents with score less than 60<endouttext/></choice><choice correct='false'><startouttext/>Explode like the Death Star<endouttext/></choice><choice correct='false'><startouttext/>None of the above<endouttext/></choice></checkboxgroup></choiceresponse></problem></sequential><sequential graded='false' display_name='Querying arrays'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Which of the following documents would be returned by this query?

<pre>db.products.find( { tag : "shiny" } );</pre><choiceresponse direction='vertical'><checkboxgroup type='MultipleChoice'><choice correct='true'><startouttext/>{ _id : 42 , name : "Whizzy Wiz-o-matic", tags : [ "awesome", "shiny" , "green" ] }<endouttext/></choice><choice correct='false'><startouttext/>{ _id : 704 , name : "Fooey Foo-o-tron", tags : [ "blue", "mediocre" ] }<endouttext/></choice><choice correct='true'><startouttext/>{ _id : 1040 , name : "Snappy Snap-o-lux", tags : "shiny" }<endouttext/></choice><choice correct='false'><startouttext/>{ _id : 12345 , name : "Quuxinator", tags : [ ] }<endouttext/></choice></checkboxgroup></choiceresponse></problem></sequential><sequential graded='false' display_name='Querying with arrays'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Which of the following documents does not match this query?

<pre>db.users.find( { friends : { $all : [ "Joe" , "Bob" ] }, favorites : { $in : [ "running" , "pickles" ] } } )</pre><multiplechoiceresponse direction='vertical'><choicegroup type='MultipleChoice'><choice location='bottom' correct='false'><text>{ name : "William" , friends : [ "Bob" , "Fred" ] , favorites : [ "hamburgers", "running" ] }</text></choice><choice location='bottom' correct='false'><text>{ name : "Stephen" , friends : [ "Joe" , "Pete" ] , favorites : [ "pickles", "swimming" ] }</text></choice><choice location='bottom' correct='true'><text>{ name : "Cliff" , friends : [ "Pete" , "Joe" , "Tom" , "Bob" ] , favorites : [ "pickles", "cycling" ] }</text></choice><choice location='bottom' correct='false'><text>{ name : "Harry" , friends : [ "Joe" , "Bob" ] , favorites : [ "hot dogs", "swimming" ] }</text></choice></choicegroup></multiplechoiceresponse></problem></sequential><sequential graded='false' display_name='Queries with dot notation'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Suppose a simple e-commerce product catalog called <em>catalog</em> with documents that look like this:

<pre>
{ product : "Super Duper-o-phonic", 
  price : 100000000000,
  reviews : [ { user : "fred", comment : "Great!" , rating : 5 },
              { user : "tom" , comment : "I agree with Fred, somewhat!" , rating : 4 } ],
  ... }
</pre>

Write a query that finds all products that cost more than 10,000 and that have a rating of 5 or better.<customresponse><textbox rows='4' cols='50' correct_answer='db.catalog.find( { price : { $gt : 10000 } , "reviews.rating" : { $gte : 5 } } ); '/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.catalog.find( { price : { $gt : 10000 } , "reviews.rating" : { $gte : 5 } } ); '''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='Querying, cursor modifiers'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Recall the documents in the scores collection:

<pre>
{
	"_id" : ObjectId("50844162cb4cf4564b4694f8"),
	"student" : 0,
	"type" : "exam",
	"score" : 75
}
</pre>

Write a query that retrieves exam documents, sorted by score in descending order, skipping the first 50 and showing only the next 20.<customresponse><textbox rows='4' cols='50' correct_answer='db.scores.find( { type : "exam" } ).sort( { score : -1 } ).skip(50).limit(20)'/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.scores.find( { type : "exam" } ).sort( { score : -1 } ).skip(50).limit(20)'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='Counting documents'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>How would you count the documents in the <em>scores</em> collection where the type was "essay" and the score was greater than 90?<customresponse><textbox rows='4' cols='50' correct_answer='db.scores.count({ type:"essay", score:{$gt:90}});'/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.scores.count({ type:"essay", score:{$gt:90}});'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='Array updating operators'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Suppose you have the following document in your <em>friends</em> collection:

<pre>
{ _id : "Mike", interests : [ "chess", "botany" ] }
</pre>

What will the result of the following updates be?

<pre>
db.friends.update( { _id : "Mike" }, { $push : { interests : "skydiving" } } );
db.friends.update( { _id : "Mike" }, { $pop : { interests : -1 } } );
db.friends.update( { _id : "Mike" }, { $addToSet : { interests : "skydiving" } } );
db.friends.update( { _id : "Mike" }, { $pushAll: { interests : [ "skydiving" , "skiing" ] } } );
</pre><customresponse><textbox rows='4' cols='50' correct_answer='{ _id : "Mike" , "interests" : [ "botany", "skydiving", "skydiving", "skiing" ] }'/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''{ _id : "Mike" , "interests" : [ "botany", "skydiving", "skydiving", "skiing" ] }'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='Multi-update'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Recall the schema of the <em>scores</em> collection:

<pre>
{
	"_id" : ObjectId("50844162cb4cf4564b4694f8"),
	"student" : 0,
	"type" : "exam",
	"score" : 75
}
</pre>

How would you give every record whose score was less than 70 an extra 20 points?<customresponse><textbox rows='4' cols='50' correct_answer="db.scores.update( { score : { $lt: 70 } } , { $inc : { score : 20 } } , { multi : true } );"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.scores.update( { score : { $lt: 70 } } , { $inc : { score : 20 } } , { multi : true } );'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential><sequential graded='false' display_name='Removing documents'><problem showanswer='attempted' graded='false' format='Quiz' display_name='Quiz'>Recall the schema of the <em>scores</em> collection:

<pre>
{
	"_id" : ObjectId("50844162cb4cf4564b4694f8"),
	"student" : 0,
	"type" : "exam",
	"score" : 75
}
</pre>

How would you delete every record whose score was less than 60?<customresponse><textbox rows='4' cols='50' correct_answer="db.scores.remove( { score : { $lt : 60 } } );"/><answer type='loncapa/python'><![CDATA[
import re
correct = ['correct']
try:
  r = str(submission[0])
except ValueError:
  correct[0] = 'incorrect'
  r = '0'
response = re.sub(r'\s+', '', r)
quiz_answer = '''db.scores.remove( { score : { $lt : 60 } } );'''
quiz_answer = re.sub(r'\s+', '', quiz_answer)
if not(response == quiz_answer):
  correct[0] = 'incorrect'
  print 'response = ', response
  print 'quiz_answer = ', quiz_answer
]]></answer></customresponse></problem></sequential></chapter></course>